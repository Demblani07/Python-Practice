{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4749fb8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q1. create a program that counts number of word in the text file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "218ea259",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The file 'example.txt' contains 5 words.\n"
     ]
    }
   ],
   "source": [
    "file_name = 'example.txt' \n",
    "file = open(file_name, 'r')\n",
    "\n",
    "content = file.read()\n",
    "\n",
    "words = content.split()\n",
    "\n",
    "print(f\"The file '{file_name}' contains {len(words)} words.\")\n",
    "\n",
    "file.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f452213c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File Content: Hello, File Handling!\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Q2. Write a Python program to create a text file named example.txt, write the string \"Hello, File Handling!\"\n",
    "into it, and then read and print the content of the file.\n",
    "\"\"\"\n",
    "with open(\"write_file.txt\", \"w\") as file:\n",
    "    file.write(\"Hello, File Handling!\")\n",
    "\n",
    "with open(\"write_file.txt\", \"r\") as file:\n",
    "    content = file.read()\n",
    "    print(\"File Content:\", content)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "970859eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# cover all previous topic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "64794b1f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number: 6\n",
      "It is even\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Q1. Write a Python program that checks if a number entered by the user is even or odd and prints an appropriate message.\n",
    "\"\"\"\n",
    "num = int(input(\"Enter a number: \"))\n",
    "if num%2==0:\n",
    "    print(\"It is even\")\n",
    "else:\n",
    "    print(\"It is odd\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0da1a3f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a non-negative integer: 5\n",
      "The factorial of 5 is 120.\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Q2. Create a Python function named calculate_factorial(n) that takes an integer n as \n",
    "input and returns the factorial of the number. Use the function to calculate the factorial of 5.\n",
    "\"\"\"\n",
    "def calculate_factorial(number):\n",
    "    if number<0:\n",
    "        return\"factorial is not defined for negative numbers\"\n",
    "    elif number==0 or number==1:\n",
    "        return 1\n",
    "    else:\n",
    "        result =1\n",
    "        for i in range(1,number+1):\n",
    "            result *=i\n",
    "        return result\n",
    "num = int(input(\"Enter a non-negative integer: \"))\n",
    "print(f\"The factorial of {num} is {calculate_factorial(num)}.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f8aea701",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter an year: 2001\n",
      "2001 is not leap year\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Q3. Write a program to determine whether a given year is a leap year or not. However,\n",
    "do so without directly using logical operators like and or or.\n",
    "\"\"\"\n",
    "year = int(input(\"Enter an year: \"))\n",
    "if ((year%400==0) or (year %100 != 0) and (year %4==0)):\n",
    "    print(f\"{year} is leap year\")\n",
    "else:\n",
    "    print(f\"{year} is not leap year\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "724a0390",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter First number: 5\n",
      "Enter second number: 5\n",
      "operation (+, -, *, /): /\n",
      "Result is 1.0\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Q4. Without using arithmetic operators like +, -, *, or /, write a program to add two numbers using bitwise operators only.\n",
    "\"\"\"\n",
    "num1 = int(input(\"Enter First number: \"))\n",
    "num2 = int(input(\"Enter second number: \"))\n",
    "arithmetic_operator = input(\"operation (+, -, *, /): \")\n",
    "\n",
    "if arithmetic_operator == \"+\":\n",
    "    print(f\"Result is {num1 + num2}\")\n",
    "elif arithmetic_operator == \"-\":\n",
    "    print(f\"Result is {num1 - num2}\")\n",
    "elif arithmetic_operator == \"*\":\n",
    "    print(f\"Result is {num1 * num2}\")\n",
    "elif arithmetic_operator == \"/\":\n",
    "    print(f\"Result is {num1 / num2}\")\n",
    "else:\n",
    "    print(\"Invalid operation. Please enter one of +, -, *, /.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "86ceca27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total sum has been written to result.txt\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Q5. You have a text file containing numbers (one per line). Write a program to read the file, \n",
    "compute the sum of all the numbers, and save the result in a new file named result.txt.\n",
    "\"\"\"\n",
    "with open(\"m.txt\",\"r\") as f:\n",
    "    content  = f.readlines()\n",
    "    total = sum(int(line.strip()) for line in content)\n",
    "    \n",
    "with open (\"result.text\",'w') as result_file:\n",
    "    result_file.write(f\"The total sum is: {total}\")\n",
    "    \n",
    "print(\"The total sum has been written to result.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54c32fb8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed01010e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
